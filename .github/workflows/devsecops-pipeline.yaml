name: DevSecOps Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
      # Checkout repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # -------------------
      # 1. Gitleaks (Secrets Scan)
      # -------------------
      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        with:
          args: detect --source . --report-path gitleaks-report.json --no-banner

      # -------------------
      # 2. Semgrep (SAST)
      # -------------------
      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: "p/ci"
          generateSarif: "true"
          uploadSarif: "true"

      # -------------------
      # 3. Trivy (Container Image Scan)
      # -------------------
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Setup java jdk
        uses: actions/setup-java@v5.0.0
      
      - name: Build Docker Image
        run: docker build -t teeghaction-react:latest .

      - name: Run Trivy
        uses: aquasecurity/trivy-action@0.12.0
        with:
          image-ref: myapp:latest
          format: table
          exit-code: 0
          vuln-type: "os,library"
          severity: "HIGH,CRITICAL"

      # -------------------
      # 4. Checkov (IaC Security Scan)
      # -------------------
      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          output_format: cli

  # -------------------
  # 5. Deployment Job
  # -------------------
  deploy:
    needs: security-scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      # Docker Build & Push
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Docker Image
        run: |
          IMAGE=ghcr.io/${{ github.repository }}/myapp:latest
          docker build -t $IMAGE .
          docker push $IMAGE

      # Deploy to Kubernetes
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: v1.29.0

      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f k8s/deployment.yaml
          kubectl rollout status deployment/myapp

  # -------------------
  # 6. DAST Job (OWASP ZAP)
  # -------------------
  dast:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Wait for Service LoadBalancer IP
        run: |
          for i in {1..30}; do
            APP_URL=$(kubectl get svc myapp-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || true)
            if [ ! -z "$APP_URL" ]; then
              echo "App is accessible at http://$APP_URL"
              echo "APP_URL=http://$APP_URL" >> $GITHUB_ENV
              break
            fi
            echo "Waiting for LoadBalancer IP..."
            sleep 20
          done

      - name: Run OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.8.0
        with:
          target: ${{ env.APP_URL }}
